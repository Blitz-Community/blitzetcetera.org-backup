<html><head><link rel=stylesheet href="scaven.css" Type=Text/css><meta http-equiv=Content-Type content="text/html; charset=windows-1251"><title>Blitz3D Туториал</title></head><body id=t1><div id=t2><table id=t3> <tr id=t22> <td id=t23> <p id=t8><span id=t7>2. Есть ли жизнь в </span><span id=t7>DirectX</span><span id=t7>`е?</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>Вставим следующий кусок кода после инициализации графики:</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <table id=t24> <tr id=t38> <td id=t39> <p id=t27><span id=t31>cam</span><span id=t30>=</span><span id=t28>CreateCamera</span><span id=t30>()</span></p> <p id=t27><span id=t40>&nbsp;</span></p> <p id=t27><span id=t31>cub</span><span id=t30>=</span><span id=t28>CreateCube</span><span id=t30>()</span><span id=t33></span></p> </td> </tr> </table> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>В этих строках мы создаём наши первые объекты.</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t31>cam</span><span id=t30>=</span><span id=t28>CreateCamera</span><span id=t30>()</span><span id=t9> – здесь, мы создаём камеру, (как бы наши «глаза» в виртуальном мире), и помещаем её в переменную </span><span id=t9>cam</span><span id=t9> (читайте: называем её </span><span id=t9>cam</span><span id=t9>).</span></p> <p id=t8><span id=t9><span id=t15>  </span></span></p> <p id=t8><span id=t31>cub</span><span id=t30>=</span><span id=t28>CreateCube</span><span id=t30>()</span><span id=t9> – таким же образом создаём меш – куб, и называем </span><span id=t9>cub</span><span id=t9>.</span></p> <p id=t8><span id=t9>Созданные нами объекты очутятся в начале координат, т.е. в точке с координатами 0,0,0. Чтобы камера не была в одной точке с кубом, а смотрела на него со стороны, нам нужно «поставить» куб в другое место. Для этого можно воспользоваться командой </span><span id=t9>PositionEntity</span><span id=t9>, которую мы расположим после команды создания куба</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <table id=t24> <tr id=t41> <td id=t42> <p id=t27><span id=t28>PositionEntity</span><span id=t31> </span><span id=t31>cub</span><span id=t30>,</span><span id=t29>0</span><span id=t30>,</span><span id=t29>0</span><span id=t30>,</span><span id=t29>5</span><span id=t33></span></p> </td> </tr> </table> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t28>PositionEntity</span><span id=t31> </span><span id=t31>cub</span><span id=t30>,</span><span id=t29>0</span><span id=t30>,</span><span id=t29>0</span><span id=t30>,</span><span id=t29>5</span><span id=t9><span id=t15>  </span>- ставит объект куб в точку с координатами 0,0,5 – т.е. немного впереди.</span></p> <p id=t8><span id=t9>Синтакс: </span><b><span id=t43>PositionEntity</span><span id=t43> </span><span id=t43>объект, </span></b><b><span id=t43>X</span><span id=t43> координата, </span></b><b><span id=t43>Y</span><span id=t43> координата, </span></b><b><span id=t43>Z</span><span id=t43> координата</span></b><span id=t9></span></p> <p id=t8><span id=t9>А в цикл программы вставим следующие три строчки:</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <table id=t24> <tr id=t44> <td id=t45> <p id=t27><span id=t28>UpdateWorld</span><span id=t31></span></p> <p id=t27><span id=t28>RenderWorld</span><span id=t30></span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t28>Flip</span></p> </td> </tr> </table> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>Эти команды (точнее последние две) должны присутствовать в вашей программе, если вы хотите, чтобы она что-то вам показывала.</span></p> <p id=t8><span id=t9><span id=t15>  </span></span></p> <p id=t8><span id=t28>UpdateWorld</span><span id=t9><span id=t15>  </span>- Анимирует все объекты в созданном мире, и проводит проверку на столкновения.</span></p> <p id=t8><span id=t28>RenderWorld</span><span id=t9><span id=t15>  </span>- Рендерит все объекты. (Т.е. создаёт картинку той части мира, которую видит камера(ы))</span></p> <p id=t8><span id=t28>Flip</span><span id=t9> – Меняет местами передний и задний буфер. (На этом основан способ двойной буферизации, но это знать не обязательно – просто нужно вставлять эту команду, для того, чтобы на экране что-то появлялось)</span></p> <p id=t8><span id=t9><span id=t15>  </span></span></p> <p id=t8><span id=t9>Итак, теперь запустите программу… что вы видите? Серый квадрат? Практически да, хотя на самом деле – это куб, просто мы смотрим на него прямо, и видим только одну грань.</span></p> <p id=t8><span id=t9>Хоть какой-то прогресс… дальше интересней. Заставим-ка мы его подвигаться!</span></p> <p id=t8><span id=t9>Поставим эту строчку в цикл. Прямо в самое его начало после команды </span><span id=t43>Repeat</span><span id=t9>…</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <table id=t24> <tr id=t46> <td id=t47> <p id=t48><span id=t28>TurnEntity</span><span id=t31> </span><span id=t31>cub</span><span id=t30>,.</span><span id=t29>1</span><span id=t30>,.</span><span id=t29>2</span><span id=t30>,.</span><span id=t29>3</span><span id=t33></span></p> </td> </tr> </table> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t28>TurnEntity</span><span id=t31> </span><span id=t31>cub</span><span id=t30>,.</span><span id=t29>1</span><span id=t30>,.</span><span id=t29>2</span><span id=t30>,.</span><span id=t29>3</span><span id=t9> – эта функция поворачивает объект </span><span id=t43>cub</span><span id=t9> </span><span id=t9>на </span><span id=t43>0.1 градус по оси </span><span id=t43>X</span><span id=t9>,</span><span id=t43> 0.2<span id=t15>  </span>градуса по оси </span><span id=t43>Y</span><span id=t9>,</span><span id=t43> и 0.3 градуса по оси </span><span id=t43>Z</span><span id=t9>, относительно системы координат объекта… естественно, здесь можно использовать отрицательные числа и ноль. Например команда, </span><b><span id=t43>TurnEntity</span><span id=t43> </span></b><b><span id=t43>cub</span><span id=t43>,0,.1,0</span></b><span id=t9> – будет поворачивать куб просто влево, а </span><b><span id=t43>TurnEntity</span><span id=t43> </span></b><b><span id=t43>cub</span><span id=t43>,0,-.1,0</span></b><span id=t9> – вправо.</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>Итак, первая «сложность» (хотя в общем ничего сложного здесь нет, это наоборот даже удобно…). Попробую объяснить: помните, я говорил, что оси </span><span id=t9>X</span><span id=t9>, </span><span id=t9>Y</span><span id=t9> и </span><span id=t9>Z</span><span id=t9> (т.е. система координат, если говорить человеческим языком </span><span id=t10><span id=t11>J</span></span><span id=t9>) есть не только у самой вселенной, но и у каждого объекта. Сделано это для удобства. Главная – «мировая» система координат – статичная, и нужна нам для того, чтобы узнать где, например, находится объект, а система координат объекта – двигается и поворачивается вместе с самим объектом. Например, у нас есть персонаж, который должен поворачиваться и ходить вперёд, допустим, мы его повернули на какой-то угол. И, если мы захотим сделать так, чтобы он шёл в ту сторону, в которую он направлен через «мировую» систему координат, нам придётся делать вычисления, рассчитывающие то, на какой угол он повёрнут, и насколько должен передвинутся относительно каждой оси, но, слава Богу, у него есть собственная система координат, и, где бы он не находился, как бы он не был повёрнут относительно «мировой» системы координат, его </span><span id=t9>Z</span><span id=t9> ось будет указывать направление вперёд-назад (относительно него), </span><span id=t9>Y</span><span id=t9> – вверх-вниз, </span><span id=t9>X</span><span id=t9> – влево-вправо! Иногда нужно наоборот – независимо от того, куда направлен объект, двигать его в какую-то определённую сторону, относительно всего мира. Так, например, действует гравитация – т.е. как бы не был повёрнут объект со своей системой координат, мы просто двигаем его вниз по оси </span><span id=t9>Y</span><span id=t9> по «мировой» системе координат – и он падает!</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>Это было лирическое отступление, чтобы всё было ясно как пень </span><span id=t10><span id=t11>J</span></span><span id=t9>. Сами команды будут попозже…</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>Итак, когда вы запустите эту программу, вы увидите вращающийся куб. Хм... правда чего-то не хватает?.. Да! Все его грани одинакового<span id=t15>  </span>цвета, и мы понимаем, что это именно куб чисто интуитивно. Что же закрашивать каждую грань разными цветами? Нет до этого мы не доросли, да это и не нужно. То, что нам не хватает – это свет! (да, да – это который после тьмы </span><span id=t10><span id=t11>J</span></span><span id=t9>) Именно он должен оживить всю сцену.</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>Да будет свет!</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <table id=t24> <tr id=t46> <td id=t47> <p id=t48><span id=t31>lit</span><span id=t30>=</span><span id=t28>CreateLight</span><span id=t30>()</span><span id=t33></span></p> </td> </tr> </table> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>Здесь всё также, как и раньше! Эту команду можно поставить в любом месте перед главным циклом, но я обычно создаю свет сразу после создания камеры. Теперь запустите программу. Так намного лучше, неправда ли?</span></p> <p id=t8><span id=t9>Да, кстати, свет – это объект, а это значит, что им тоже можно управлять, как и всеми объектами. Поэтому, чтобы он лучше смотрелся, сразу же после создания повернём его:</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <table id=t24> <tr id=t46> <td id=t47> <p id=t48><span id=t28>TurnEntity</span><span id=t31> lit</span><span id=t30>,</span><span id=t29>45</span><span id=t30>,</span><span id=t29>45</span><span id=t30>,</span><span id=t29>0</span><span id=t33></span></p> </td> </tr> </table> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>По-моему так лучше… или у вас есть другие варианты?</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>А весь код выглядит так:</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <table id=t24> <tr id=t46> <td id=t47> <p id=t27><span id=t28>Graphics3D </span><span id=t29>640</span><span id=t30>,</span><span id=t29>480</span><span id=t30>,</span><span id=t29>16</span><span id=t30>,</span><span id=t29>1</span></p> <p id=t27><span id=t28>SetBuffer</span><span id=t31> </span><span id=t28>BackBuffer</span><span id=t30>()</span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t31>cam</span><span id=t30>=</span><span id=t28>CreateCamera</span><span id=t30>()</span></p> <p id=t27><span id=t31>lit</span><span id=t30>=</span><span id=t28>CreateLight</span><span id=t30>()</span></p> <p id=t27><span id=t28>TurnEntity</span><span id=t31> lit</span><span id=t30>, </span><span id=t29>45</span><span id=t30>,</span><span id=t29>45</span><span id=t30>,</span><span id=t29>0</span><span id=t30></span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t31>cub</span><span id=t30>=</span><span id=t28>CreateCube</span><span id=t30>()</span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t28>PositionEntity</span><span id=t31> cub</span><span id=t30>,</span><span id=t29>0</span><span id=t30>,</span><span id=t29>0</span><span id=t30>,</span><span id=t29>5</span><span id=t30></span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t28>Repeat</span><span id=t31></span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t30><span id=t15> </span></span><span id=t28>TurnEntity</span><span id=t31> cub</span><span id=t30>,.</span><span id=t29>1</span><span id=t30>,.</span><span id=t29>2</span><span id=t30>,.</span><span id=t29>3</span><span id=t30></span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t28><span id=t15> </span>UpdateWorld</span><span id=t31></span></p> <p id=t27><span id=t28><span id=t15> </span>RenderWorld</span><span id=t30></span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t28><span id=t15> </span>Flip</span><span id=t31></span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t27><span id=t28>Until</span><span id=t31> </span><span id=t28>KeyHit</span><span id=t30>(</span><span id=t29>1</span><span id=t30>)</span></p> <p id=t27><span id=t30>&nbsp;</span></p> <p id=t48><span id=t28>End</span><span id=t33></span></p> </td> </tr> </table> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8><span id=t9>Ну, и как вам? Всего 14 строчек сделали то, для чего в других языках пришлось бы писать несколько страниц!</span></p> <p id=t8><span id=t9>Вот, в общем первая трёхмерная программа. Не бойтесь экспериментировать – попробуйте подставить свои значения углов, или назвать объекты по-другому (тут главное изменить названия переменных во всём коде, а не только в команде создания). А чтобы убедиться, что вы всё хорошо усвоили, попробуйте сделать так, чтобы в цикле поворачивался не только куб, но и свет.</span></p> <p id=t8><span id=t9><span id=t49>            </span></span></p> <p id=t8><span id=t9>В следующем уроке мы научимся управлять объектом сами…</span></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t8>&nbsp;<span id=t9></span></p> </td> <td id=t37> <p id=t8><span id=t9><span id=t15> </span></span><b><span id=t16>Оглавление:</span></b></p> <p id=t8><span id=t9>&nbsp;</span></p> <p id=t17><span id=t18>0.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_0.htm">Введение</a></span></p> <p id=t17><span id=t18>1.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_1.htm">В начале была Тьма</a></span></p> <p id=t17><span id=t18>2.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_2.htm">Есть ли жизнь в <span id=t20>DirectX</span></a></span></p> <p id=t17><span id=t18>3.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_3.htm">Свобода и Власть 3Д (0)</a></span></p> <p id=t17><span id=t18>4.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_4.htm">Свобода и Власть 3Д (1)</a></span></p> <p id=t17><span id=t18>5.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_5.htm">2Д в 3Д</a></span></p> <p id=t17><span id=t18>6.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_6.htm">Трёхмерный курсор</a></span></p> <p id=t17><span id=t18>7.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_7.htm">Родительская зависимость или Привязки</a></span></p> <p id=t17><span id=t18>8.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_8.htm">Фишки с привязками</a></span></p> <p id=t17><span id=t18>9.<span id=t19>&nbsp; </span></span><span id=t18><a href="Blitz_9.htm">Коллизион Детекшн или как устроен мир…</a></span></p> <p id=t21><span id=t18>10.<span id=t19>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span id=t18><a href="Blitz_10.htm">Первая 3Д игра. Часть 0 – основы движка</a></span></p> <p id=t21><span id=t18>11.<span id=t19>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span id=t18><a href="Blitz_11.htm">Первая 3Д игра. Часть 1 – разработка движка</a></span></p> <p id=t21><span id=t18>12.<span id=t19>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span id=t18><a href="Blitz_12.htm">Первая 3Д игра. Часть 2 – устранение багов</a></span></p> <p id=t21><span id=t18>13.<span id=t19>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span id=t18><a href="Blitz_13.htm">Первая 3Д игра. Часть 3 – внешний вид</a></span></p> <p id=t21><span id=t18>14.<span id=t19>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span id=t18><a href="Blitz_14.htm">Первая 3Д игра. Часть 4 – от массива к спискам</a></span></p> <p id=t21><span id=t18>15.<span id=t19>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span id=t18><a href="Blitz_15.htm">Первая 3Д игра. Часть 5 – оптимизация кода</a></span></p> <p id=t21><span id=t18>16.<span id=t19>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span id=t18><a href="Blitz_16.htm">Первая 3Д игра. Часть 6 – завершение</a></span></p> <p id=t21><span id=t18>17.<span id=t19>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span id=t18><a href="Blitz_17.htm">Выведение</a></span></p> <p id=t8><span id=t18>&nbsp;</span></p> <p id=t6><span id=t18>&nbsp;</span></p> <p id=t8>&nbsp;<span id=t18></span></p> </td> </tr></table><p id=t6>&nbsp;</p></div></body></html>